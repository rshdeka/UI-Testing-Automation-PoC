----------------BROWSERUSE PROMPT-----------------
  
    **AI Agent Task: UI Testing Automation**  
    **Objective: Execute defined test cases on the application and summarize the results.**  
    
    ---  

    
    1. Open a new tab and Access the application using valid credentials.
        - Navigate to the login URL https://benefits-config-ai-test.optum.com/.
        - Click 'Log in with SSO'.
        - Select the account rajashri_deka@optum.com. 
        - Wait for Authenticator approval (if prompted).
            - If Authentication fails leading to Request being denied, **log an error and stop execution**.
        - Wait for **up to 10 seconds** for the dashboard to fully load before proceeding.
        
        - If "Your account requires authentication" message appears after logging in: 
            - Log Out of the application first. Sign out of the account rajashri_deka@optum.com.
            - Open a new tab and attempt to log in again following the same steps.
    
    
    2. After successfully logging in, execute each test case exactly once. No retries or reattempts at all.      
        - Execute **each step in sequence** as defined in the test cases ONLY.  
        
        - Positive Test Cases: [
    {
        "name": "Verify Navigation Bar Functionality",
        "description": "Ensure the navigation bar displays all pages and allows users to navigate to them.",
        "steps": [
            "Verify the navigation bar is visible at the top of the page.",
            "Click on each navigation link.",
            "Verify the user is redirected to the correct page."
        ],
        "expected_result": "Navigation bar displays all pages, and clicking on each link redirects the user to the correct page."
    },
    {
        "name": "Verify Bulk Modify Button Functionality",
        "description": "Ensure the 'Bulk Modify' button allows users to change the owner status for multiple rows.",
        "steps": [
            "Select multiple rows in the table.",
            "Click the 'Bulk Modify' button.",
            "Change the owner status for the selected rows.",
            "Verify the owner status is updated for all selected rows."
        ],
        "expected_result": "The owner status is successfully updated for all selected rows."
    },
    {
        "name": "Verify Single Row Owner Change",
        "description": "Ensure users can change the owner of a single row by selecting a name in the owner column.",
        "steps": [
            "Select a single row in the table.",
            "Click on the owner column dropdown.",
            "Select a new owner name.",
            "Verify the owner is updated for the selected row."
        ],
        "expected_result": "The owner is successfully updated for the selected row."
    },
    {
        "name": "Verify Analyst Assignment",
        "description": "Ensure users can assign an analyst to the work.",
        "steps": [
            "Select a row in the table.",
            "Click on the 'Assign Analyst' button.",
            "Select an analyst from the dropdown.",
            "Verify the analyst is assigned to the selected work."
        ],
        "expected_result": "The analyst is successfully assigned to the selected work."
    }
]  
        - Negative Test Cases: [
    {
        "name": "Verify Navigation Bar with Invalid URL",
        "description": "Ensure the navigation bar handles invalid URLs gracefully.",
        "steps": [
            "Click on a navigation link.",
            "Manually modify the URL to an invalid page.",
            "Verify the application displays an error message or redirects to a default page."
        ],
        "expected_result": "The application displays an error message or redirects to a default page."
    },
    {
        "name": "Verify Bulk Modify with No Rows Selected",
        "description": "Ensure the 'Bulk Modify' button does not allow changes when no rows are selected.",
        "steps": [
            "Click the 'Bulk Modify' button without selecting any rows.",
            "Attempt to change the owner status."
        ],
        "expected_result": "The application prevents changes and displays an appropriate error message."
    },
    {
        "name": "Verify Single Row Owner Change with Invalid Name",
        "description": "Ensure the application handles invalid owner names gracefully.",
        "steps": [
            "Select a single row in the table.",
            "Click on the owner column dropdown.",
            "Enter an invalid owner name.",
            "Attempt to save the changes."
        ],
        "expected_result": "The application prevents changes and displays an appropriate error message."
    },
    {
        "name": "Verify Analyst Assignment with No Analyst Selected",
        "description": "Ensure the application prevents assigning work when no analyst is selected.",
        "steps": [
            "Select a row in the table.",
            "Click on the 'Assign Analyst' button.",
            "Leave the analyst dropdown empty.",
            "Attempt to save the changes."
        ],
        "expected_result": "The application prevents changes and displays an appropriate error message."
    }
]  
    
    3. After executing a test case ONCE, whether it fails or passes:
        - ALWAYS navigate back to the original dashboard or Home page before executing the next test case.
    
    4. Check if the actual outcomes match the expected results, indicating successful execution.  
    
    5. If any step of a test case fails, **log an error and mark the test case as failed**.
        - **Move on to the next test case immediately without retrying**.
        - No retries or reattempts should be performed for any test case or step.
    
    
    ---  

    5. Strictly adhere to these instructions mentioned below -
  
    **IMPORTANT RULES**    
        
        - Ensure the dashboard actually loads before executing the test cases.  
        - No retries or reattempts should be performed for any test case or step at all.
        - After executing a test case, ALWAYS navigate back to the original dashboard or Home page before executing the next test case.
        - DO NOT take any action unless explicitly instructed. Follow the instructions exactly as written.
        - **DO NOT loop or retry** actions under any circumstance - including page changes, DOM updates, element index changes, or scrolling.
    ---

    **FAIL AND CONTINUE**

        - If messages like "Something new appeared after action", "Element index changed after action", "Scrolled up the page", or "Scrolled down the page" appear:
            - **Immediately stop the current test case**, 
            - **Mark it as FAILED**, 
            - **Move on to the NEXT test case**.
        - Treat any of the above messages as **terminal failures** - do not attempt to recover or proceed within that test case.
        
        - If a button is clicked, but nothing visibly changes (dialog or modal remains open, no navigation or update occurs):
            - **Click a Cancel, Close, or Exit button** once if visible within the dialog or modal to exit cleanly.
            - **Immediately mark the test case as FAILED** and **move on to the NEXT test case**.
            - **DO NOT retry the original button**, even if it remains on screen.
        - Treat the persistent presence of the same dialog or modal after the button click as **terminal failure**.

        - DO NOT reattempt any step or part of the test case once failed.
    

----------------PLAYWRIGHT AUTOMATION SCRIPTS-----------------

@controller.action('Login to the application.')
async def login(browser: BrowserContext):
    title = "Login to the application"
    print(f"Executing {title}")

    page = await browser.new_page()
    actual_outcome_details = []

    try:
        await page.goto('https://benefits-config-ai-test.optum.com/')
        await page.click('text=Log in with SSO')
        await page.click('text=rajashri_deka@optum.com')
        
        # Wait for Authenticator approval
        try:
            await page.wait_for_selector('text=Dashboard', timeout=10000)
        except TimeoutError:
            if await page.is_visible('text=Your account requires authentication'):
                await page.click('text=Sign out')
                await page.goto('https://benefits-config-ai-test.optum.com/')
                await page.click('text=Log in with SSO')
                await page.click('text=rajashri_deka@optum.com')
                await page.wait_for_selector('text=Dashboard', timeout=10000)
            else:
                raise Exception("Authentication failed, request denied.")
        
        actual_outcome_status = "Passed"
    except Exception as e:
        actual_outcome_status = "Failed"
        actual_outcome_details.append(str(e))

    return ActionResult(
        extracted_content=f"Title: {title} \nActual outcome status: {actual_outcome_status} \nActual outcome details: {actual_outcome_details}", 
        include_in_memory=True
    )

@controller.action('Verify Navigation Bar Functionality.')
async def verify_navigation_bar(browser: BrowserContext):
    title = "Verify Navigation Bar Functionality"
    print(f"Executing {title}")

    page = await browser.get_current_page()
    actual_outcome_details = []

    try:
        is_visible = await page.is_visible('nav#navigation-bar')
        if not is_visible:
            raise Exception("Navigation bar is not visible.")

        navigation_links = await page.query_selector_all('nav#navigation-bar a')
        for link in navigation_links:
            href = await link.get_attribute('href')
            await link.click()
            await page.wait_for_url(href)
            current_url = page.url
            if current_url != href:
                raise Exception(f"Navigation failed for link: {href}")

        actual_outcome_status = "Passed"
    except Exception as e:
        actual_outcome_status = "Failed"
        actual_outcome_details.append(str(e))

    return ActionResult(
        extracted_content=f"Title: {title} \nActual outcome status: {actual_outcome_status} \nActual outcome details: {actual_outcome_details}", 
        include_in_memory=True
    )

@controller.action('Verify Bulk Modify Button Functionality.')
async def verify_bulk_modify(browser: BrowserContext):
    title = "Verify Bulk Modify Button Functionality"
    print(f"Executing {title}")

    page = await browser.get_current_page()
    actual_outcome_details = []

    try:
        await page.click('table#data-table tr:nth-child(1) input[type="checkbox"]')
        await page.click('table#data-table tr:nth-child(2) input[type="checkbox"]')
        await page.click('button#bulk-modify')

        await page.select_option('select#owner-dropdown', 'new_owner')
        await page.click('button#save-changes')

        # Verify changes
        owner_updated = await page.evaluate('''() => {
            const rows = document.querySelectorAll('table#data-table tr');
            return Array.from(rows).every(row => row.querySelector('td.owner').textContent === 'new_owner');
        }''')

        if not owner_updated:
            raise Exception("Owner status not updated for all selected rows.")

        actual_outcome_status = "Passed"
    except Exception as e:
        actual_outcome_status = "Failed"
        actual_outcome_details.append(str(e))

    return ActionResult(
        extracted_content=f"Title: {title} \nActual outcome status: {actual_outcome_status} \nActual outcome details: {actual_outcome_details}", 
        include_in_memory=True
    )

@controller.action('Verify Single Row Owner Change.')
async def verify_single_row_owner_change(browser: BrowserContext):
    title = "Verify Single Row Owner Change"
    print(f"Executing {title}")

    page = await browser.get_current_page()
    actual_outcome_details = []

    try:
        await page.click('table#data-table tr:nth-child(1) input[type="checkbox"]')
        await page.click('table#data-table tr:nth-child(1) td.owner select')
        await page.select_option('table#data-table tr:nth-child(1) td.owner select', 'new_owner')
        await page.click('button#save-changes')

        # Verify change
        owner_updated = await page.evaluate('''() => {
            return document.querySelector('table#data-table tr:nth-child(1) td.owner').textContent === 'new_owner';
        }''')

        if not owner_updated:
            raise Exception("Owner not updated for the selected row.")

        actual_outcome_status = "Passed"
    except Exception as e:
        actual_outcome_status = "Failed"
        actual_outcome_details.append(str(e))

    return ActionResult(
        extracted_content=f"Title: {title} \nActual outcome status: {actual_outcome_status} \nActual outcome details: {actual_outcome_details}", 
        include_in_memory=True
    )

@controller.action('Verify Analyst Assignment.')
async def verify_analyst_assignment(browser: BrowserContext):
    title = "Verify Analyst Assignment"
    print(f"Executing {title}")

    page = await browser.get_current_page()
    actual_outcome_details = []

    try:
        await page.click('table#data-table tr:nth-child(1) input[type="checkbox"]')
        await page.click('button#assign-analyst')
        await page.select_option('select#analyst-dropdown', 'analyst_name')
        await page.click('button#save-changes')

        # Verify assignment
        analyst_assigned = await page.evaluate('''() => {
            return document.querySelector('table#data-table tr:nth-child(1) td.analyst').textContent === 'analyst_name';
        }''')

        if not analyst_assigned:
            raise Exception("Analyst not assigned to the selected work.")

        actual_outcome_status = "Passed"
    except Exception as e:
        actual_outcome_status = "Failed"
        actual_outcome_details.append(str(e))

    return ActionResult(
        extracted_content=f"Title: {title} \nActual outcome status: {actual_outcome_status} \nActual outcome details: {actual_outcome_details}", 
        include_in_memory=True
    )

@controller.action('Verify Navigation Bar with Invalid URL.')
async def verify_navigation_bar_invalid_url(browser: BrowserContext):
    title = "Verify Navigation Bar with Invalid URL"
    print(f"Executing {title}")

    page = await browser.get_current_page()
    actual_outcome_details = []

    try:
        await page.click('nav#navigation-bar a:first-child')
        await page.evaluate('''() => {
            window.history.pushState({}, '', '/invalid-url');
        }''')
        await page.wait_for_selector('text=Error', timeout=5000)

        if not await page.is_visible('text=Error'):
            raise Exception("Error message not displayed for invalid URL.")

        actual_outcome_status = "Passed"
    except Exception as e:
        actual_outcome_status = "Failed"
        actual_outcome_details.append(str(e))

    return ActionResult(
        extracted_content=f"Title: {title} \nActual outcome status: {actual_outcome_status} \nActual outcome details: {actual_outcome_details}", 
        include_in_memory=True
    )

@controller.action('Verify Bulk Modify with No Rows Selected.')
async def verify_bulk_modify_no_rows(browser: BrowserContext):
    title = "Verify Bulk Modify with No Rows Selected"
    print(f"Executing {title}")

    page = await browser.get_current_page()
    actual_outcome_details = []

    try:
        await page.click('button#bulk-modify')
        await page.select_option('select#owner-dropdown', 'new_owner')
        await page.click('button#save-changes')

        if not await page.is_visible('text=Please select rows to modify'):
            raise Exception("Error message not displayed when no rows are selected.")

        actual_outcome_status = "Passed"
    except Exception as e:
        actual_outcome_status = "Failed"
        actual_outcome_details.append(str(e))

    return ActionResult(
        extracted_content=f"Title: {title} \nActual outcome status: {actual_outcome_status} \nActual outcome details: {actual_outcome_details}", 
        include_in_memory=True
    )

@controller.action('Verify Single Row Owner Change with Invalid Name.')
async def verify_single_row_owner_change_invalid_name(browser: BrowserContext):
    title = "Verify Single Row Owner Change with Invalid Name"
    print(f"Executing {title}")

    page = await browser.get_current_page()
    actual_outcome_details = []

    try:
        await page.click('table#data-table tr:nth-child(1) input[type="checkbox"]')
        await page.click('table#data-table tr:nth-child(1) td.owner select')
        await page.fill('table#data-table tr:nth-child(1) td.owner select', 'invalid_owner')
        await page.click('button#save-changes')

        if not await page.is_visible('text=Invalid owner name'):
            raise Exception("Error message not displayed for invalid owner name.")

        actual_outcome_status = "Passed"
    except Exception as e:
        actual_outcome_status = "Failed"
        actual_outcome_details.append(str(e))

    return ActionResult(
        extracted_content=f"Title: {title} \nActual outcome status: {actual_outcome_status} \nActual outcome details: {actual_outcome_details}", 
        include_in_memory=True
    )

@controller.action('Verify Analyst Assignment with No Analyst Selected.')
async def verify_analyst_assignment_no_analyst(browser: BrowserContext):
    title = "Verify Analyst Assignment with No Analyst Selected"
    print(f"Executing {title}")

    page = await browser.get_current_page()
    actual_outcome_details = []

    try:
        await page.click('table#data-table tr:nth-child(1) input[type="checkbox"]')
        await page.click('button#assign-analyst')
        await page.click('button#save-changes')

        if not await page.is_visible('text=Please select an analyst'):
            raise Exception("Error message not displayed when no analyst is selected.")

        actual_outcome_status = "Passed"
    except Exception as e:
        actual_outcome_status = "Failed"
        actual_outcome_details.append(str(e))

    return ActionResult(
        extracted_content=f"Title: {title} \nActual outcome status: {actual_outcome_status} \nActual outcome details: {actual_outcome_details}", 
       
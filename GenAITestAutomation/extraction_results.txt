----------------BROWSERUSE PROMPT-----------------

 

    **AI Agent Task: UI Testing Automation** 

    **Objective: Execute defined test cases on the application and summarize the results.**

   

    --- 

 

   

    1. Execute the **Login Test Case** to access the application:

        - Open a new tab and Access the application using valid credentials.

        - Navigate to the login URL https://<UI>/.

        - Click 'Log in with SSO'.

        - Select the account ak@gmail.com.

        - Wait for Authenticator approval (if prompted).

            - If Authentication fails leading to Request being denied, **log an error and stop execution**.

        - Wait for **up to 10 seconds** for the dashboard to fully load before proceeding.

   

    

    2. After successfully logging in, execute each test case **only ONCE** in the following order:

 

        - First, execute all the **Positive Test Cases** in sequence:

        [

    {

        "test": 1,

        "name": "Verify Navigation Bar Functionality",

        "description": "Ensure the navigation bar displays all pages and allows users to navigate to them.",

        "steps": [

            "Verify the navigation bar is visible at the top of the page.",

            "Click on each navigation link.",

            "Verify the user is redirected to the correct page."

        ],

        "expected_result": "Navigation bar displays all pages, and clicking on each link redirects the user to the correct page."

    },

    {

        "test": 2,

        "name": "Verify Bulk Modify Button Functionality",

        "description": "Ensure the 'Bulk Modify' button allows users to change the owner status of multiple rows.",

        "steps": [

            "Select multiple rows in the table.",

            "Click the 'Bulk Modify' button.",

            "Change the owner status for the selected rows.",

            "Verify the owner status is updated for all selected rows."

        ],

        "expected_result": "The owner status of all selected rows is updated successfully."

    },

    {

        "test": 3,

        "name": "Verify Single Row Owner Change",

        "description": "Ensure the user can change the owner of a single row by selecting a name in the owner column.",

        "steps": [

            "Select a single row in the table.",

            "Click on the owner column dropdown.",

            "Select a new owner name.",

            "Verify the owner is updated for the selected row."

        ],

        "expected_result": "The owner of the selected row is updated successfully."

    }
]
 

        - Then, execute all the **Negative Test Cases** in sequence:

        [

    {

        "test": 4,

        "name": "Verify Navigation Bar with Invalid URL",

        "description": "Ensure the navigation bar handles invalid URLs gracefully.",

        "steps": [

            "Click on a navigation link.",

            "Manually modify the URL to an invalid page.",

            "Verify the application displays an error message or redirects to a default page."

        ],

        "expected_result": "The application displays an error message or redirects to a default page."

    },

    {

        "test": 5,

        "name": "Verify Bulk Modify with No Rows Selected",

        "description": "Ensure the 'Bulk Modify' button does not allow changes when no rows are selected.",

        "steps": [

            "Click the 'Bulk Modify' button without selecting any rows.",

            "Attempt to change the owner status."

        ],

        "expected_result": "The application prevents changes and displays an appropriate error message."

    },

    {

        "test": 6,

        "name": "Verify Single Row Owner Change with Invalid Name",

        "description": "Ensure the user cannot select an invalid name in the owner column dropdown.",

        "steps": [

            "Select a single row in the table.",

            "Click on the owner column dropdown.",

            "Attempt to select an invalid name."

        ],

        "expected_result": "The application prevents selection and displays an appropriate error message."

    }
]

   

    3. After executing a test case ONCE, whether it fails or passes:

        - **ALWAYS navigate back to the original dashboard or Home page** before executing the next test case.

   

    4. Execute each test case **exactly once**. Do not retry or reattempt any test case or step under any circumstances.

   

    5. If a test case fails at any step:

        - **Immediately stop the current test case**,

        - **Mark it as FAILED**,

        - **Move on to the NEXT test case** immediately without retrying.

   

    6. Check if the actual outcomes match the expected results, indicating successful execution.

 

    7. After executing all Positive and Negative test cases ONCE:

        - **Stop execution completely**.

        - Summarize the results of all test cases, including their status (Passed/Failed) and details of any failures.

   

    

    ---

 

    **IMPORTANT RULES**   

        

        - Ensure the dashboard actually loads before executing the test cases.

 

        - After executing a test case:

            - **ALWAYS navigate back to the main dashboard or Home page** before starting the next test case. This is mandatory - test execution will fail otherwise.

       

        - **DO NOT retry or reattempt** any test case or step under any circumstances.

        - **DO NOT loop or retry** actions under any circumstance - including page changes, DOM updates, element index changes, or scrolling.

 

        - DO NOT take any action unless explicitly instructed. Follow the instructions exactly as written.

 

    ---

 

    **FAIL AND CONTINUE**

 

        - If messages like "Something new appeared after action", "Element index changed after action", "Scrolled up the page", or "Scrolled down the page" appear:

            - **Immediately stop the current test case**,

            - **Mark it as FAILED**,

            - **Move on to the NEXT test case**.

        - Treat any of the above messages as **terminal failures** - do not attempt to recover or proceed within that test case.

       

        - If a button is clicked, but nothing visibly changes (dialog or modal remains open, no navigation or update occurs):

            - **Click a Cancel, Close, or Exit button** once if visible within the dialog or modal to exit cleanly.

            - **Immediately mark the test case as FAILED** and **move on to the NEXT test case**.

            - **DO NOT retry the original button**, even if it remains on screen.

        - Treat the persistent presence of the same dialog or modal after the button click as **terminal failure**.

 

        - DO NOT reattempt any step or part of the test case once failed.

    ---

   

 

----------------PLAYWRIGHT AUTOMATION SCRIPTS-----------------

 

@controller.action('Login to the application.')

async def login_test_case(browser: BrowserContext):

    title = "Login Test Case"

    print(f"Fallback mechanism invoked for {title} task.")

    print(f"Executing {title} task.")

 

    page = await browser.new_page()

    actual_outcome_details = []

 

    try:

        await page.goto('https://<UI>/')

        await page.click('text=Log in with SSO')

        await page.click('text=ak@gmail.com')

       

        # Wait for Authenticator approval

        try:

            await page.wait_for_selector('selector-for-dashboard', timeout=10000)

            actual_outcome_status = "Passed"

        except TimeoutError:

            actual_outcome_status = "Failed"

            actual_outcome_details.append("Dashboard did not load within 10 seconds.")

    except Exception as e:

        actual_outcome_status = "Failed"

        actual_outcome_details.append(str(e))

 

    return ActionResult(

        extracted_content=f"Title: {title} \nActual outcome status: {actual_outcome_status} \nActual outcome details: {actual_outcome_details}",

        include_in_memory=True

    )

 

@controller.action('Verify Navigation Bar Functionality.')

async def verify_navigation_bar(browser: BrowserContext):

    title = "Verify Navigation Bar Functionality"

    print(f"Fallback mechanism invoked for {title} task.")

    print(f"Executing {title} task.")

 

    page = await browser.get_current_page()

    actual_outcome_details = []

 

    try:

        is_visible = await page.is_visible('selector-for-navigation-bar')

        if not is_visible:

            raise Exception("Navigation bar is not visible.")

 

        navigation_links = ['selector-for-link1', 'selector-for-link2']  # Add actual selectors

        for link in navigation_links:

            await page.click(link)

            # Verify redirection

            if not await page.is_visible('selector-for-expected-page'):

                raise Exception(f"Redirection failed for {link}")

 

        actual_outcome_status = "Passed"

    except Exception as e:

        actual_outcome_status = "Failed"

        actual_outcome_details.append(str(e))

 

    return ActionResult(

        extracted_content=f"Title: {title} \nActual outcome status: {actual_outcome_status} \nActual outcome details: {actual_outcome_details}",

        include_in_memory=True

    )

 

@controller.action('Verify Bulk Modify Button Functionality.')

async def verify_bulk_modify(browser: BrowserContext):

    title = "Verify Bulk Modify Button Functionality"

    print(f"Fallback mechanism invoked for {title} task.")

    print(f"Executing {title} task.")

 

    page = await browser.get_current_page()

    actual_outcome_details = []

 

    try:

        await page.click('selector-for-row1')

        await page.click('selector-for-row2')

        await page.click('selector-for-bulk-modify-button')

        await page.select_option('selector-for-owner-dropdown', 'new-owner-value')

 

        # Verify owner status update

        if not await page.is_visible('selector-for-updated-owner-status'):

            raise Exception("Owner status update failed for selected rows.")

 

        actual_outcome_status = "Passed"

    except Exception as e:

        actual_outcome_status = "Failed"

        actual_outcome_details.append(str(e))

 

    return ActionResult(

        extracted_content=f"Title: {title} \nActual outcome status: {actual_outcome_status} \nActual outcome details: {actual_outcome_details}",

        include_in_memory=True

    )

 

@controller.action('Verify Single Row Owner Change.')

async def verify_single_row_owner_change(browser: BrowserContext):

    title = "Verify Single Row Owner Change"

    print(f"Fallback mechanism invoked for {title} task.")

    print(f"Executing {title} task.")

 

    page = await browser.get_current_page()

    actual_outcome_details = []

 

    try:

        await page.click('selector-for-single-row')

        await page.click('selector-for-owner-dropdown')

        await page.select_option('selector-for-owner-dropdown', 'new-owner-value')

 

        # Verify owner update

        if not await page.is_visible('selector-for-updated-owner-status'):

            raise Exception("Owner update failed for the selected row.")

 

        actual_outcome_status = "Passed"

    except Exception as e:

        actual_outcome_status = "Failed"

        actual_outcome_details.append(str(e))

 

    return ActionResult(

        extracted_content=f"Title: {title} \nActual outcome status: {actual_outcome_status} \nActual outcome details: {actual_outcome_details}",

        include_in_memory=True

    )

 

@controller.action('Verify Navigation Bar with Invalid URL.')

async def verify_navigation_bar_invalid_url(browser: BrowserContext):

    title = "Verify Navigation Bar with Invalid URL"

    print(f"Fallback mechanism invoked for {title} task.")

    print(f"Executing {title} task.")

 

    page = await browser.get_current_page()

    actual_outcome_details = []

 

    try:

        await page.click('selector-for-navigation-link')

        await page.evaluate("window.location.href = 'invalid-url'")

       

        # Verify error message or redirection

        if not await page.is_visible('selector-for-error-message') and not await page.is_visible('selector-for-default-page'):

            raise Exception("Application did not handle invalid URL gracefully.")

 

        actual_outcome_status = "Passed"

    except Exception as e:

        actual_outcome_status = "Failed"

        actual_outcome_details.append(str(e))

 

    return ActionResult(

        extracted_content=f"Title: {title} \nActual outcome status: {actual_outcome_status} \nActual outcome details: {actual_outcome_details}",

        include_in_memory=True

    )

 

@controller.action('Verify Bulk Modify with No Rows Selected.')

async def verify_bulk_modify_no_rows(browser: BrowserContext):

    title = "Verify Bulk Modify with No Rows Selected"

    print(f"Fallback mechanism invoked for {title} task.")

    print(f"Executing {title} task.")

 

    page = await browser.get_current_page()

    actual_outcome_details = []

 

    try:

        await page.click('selector-for-bulk-modify-button')

       

        # Attempt to change owner status

        if await page.is_enabled('selector-for-owner-dropdown'):

            raise Exception("Bulk modify allowed changes with no rows selected.")

 

        actual_outcome_status = "Passed"

    except Exception as e:

        actual_outcome_status = "Failed"

        actual_outcome_details.append(str(e))

 

    return ActionResult(

        extracted_content=f"Title: {title} \nActual outcome status: {actual_outcome_status} \nActual outcome details: {actual_outcome_details}",

        include_in_memory=True

    )

 

@controller.action('Verify Single Row Owner Change with Invalid Name.')

async def verify_single_row_invalid_name(browser: BrowserContext):

    title = "Verify Single Row Owner Change with Invalid Name"

    print(f"Fallback mechanism invoked for {title} task.")

    print(f"Executing {title} task.")

 

    page = await browser.get_current_page()

    actual_outcome_details = []

 

    try:

        await page.click('selector-for-single-row')

        await page.click('selector-for-owner-dropdown')

       

        # Attempt to select invalid name

        if await page.is_enabled('selector-for-invalid-owner'):

            raise Exception("Invalid owner name was selectable.")

 

        actual_outcome_status = "Passed"

    except Exception as e:

        actual_outcome_status = "Failed"

        actual_outcome_details.append(str(e))

 

    return ActionResult(

        extracted_content=f"Title: {title} \nActual outcome status: {actual_outcome_status} \nActual outcome details: {actual_outcome_details}",

        include_in_memory=True

    )